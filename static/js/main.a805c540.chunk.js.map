{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","todoItem","getUser","userId","usersFromServer","find","App","useState","selectUserId","setSelectUserId","currentTodos","setCurrentTodos","input","setInput","inputError","setInputError","userError","setUserError","action","method","onSubmit","event","preventDefault","newTodo","Math","max","todoId","addTodo","type","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a805c540.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    user,\n    title,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todoItem => (\n        <TodoInfo\n          todo={todoItem}\n          key={todoItem.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  // if there is no user with a given userId\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [selectUserId, setSelectUserId] = useState('');\n  const [currentTodos, setCurrentTodos] = useState(todos);\n  const [input, setInput] = useState('');\n  const [inputError, setInputError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const addTodo = () => {\n    const newTodo: Todo = {\n      id: Math.max(...todos.map(todoId => todoId.id)) + 1,\n      title: input,\n      completed: false,\n      userId: +selectUserId,\n      user: getUser(+selectUserId),\n    };\n\n    setCurrentTodos([...currentTodos, newTodo]);\n\n    setInput('');\n    setSelectUserId('');\n  };\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n    setInputError(false);\n  };\n\n  const handleUserInput = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserId(event.target.value);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (input && selectUserId) {\n      addTodo();\n    }\n\n    setInputError(!input);\n    setUserError(!selectUserId);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={input}\n            onChange={handleTitleInput}\n          />\n          {inputError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectUserId}\n            onChange={handleUserInput}\n          >\n            <option value=\"\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}